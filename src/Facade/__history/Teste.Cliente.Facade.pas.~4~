unit Teste.Cliente.Facade;

interface

uses
  System.Generics.Collections,
  Teste.Cliente.Entity,
  Teste.Cliente.Controller;

type
  TClienteFacade = class
  private
    FClienteController: TClienteController;

    class var FInstancia: TClienteFacade;
  public
    class function GetInstancia: TClienteFacade;

    procedure Insert(Cliente: TCliente);
    procedure Update(Cliente: TCliente);
    procedure Delete(Id: Integer);

    function FindById(const AId: Integer): TCliente;
    function FindAll(const ASql: String; const AParam: Boolean = False): TObjectList<TCliente>;
  end;

implementation

{ TClienteFacade }

procedure TClienteFacade.Delete(Id: Integer);
begin

end;

function TClienteFacade.FindAll(const ASql: String;
  const AParam: Boolean): TObjectList<TCliente>;
begin

end;

function TClienteFacade.FindById(const AId: Integer): TCliente;
begin

end;

class function TClienteFacade.GetInstancia: TClienteFacade;
begin

end;

procedure TClienteFacade.Insert(Cliente: TCliente);
begin

end;

procedure TClienteFacade.Update(Cliente: TCliente);
begin
  try
    FProdutoController := TProdutoController.Create;
    FProdutoController.Update(Produto);
  finally
    FProdutoController.Free;
  end;
end;

end.
