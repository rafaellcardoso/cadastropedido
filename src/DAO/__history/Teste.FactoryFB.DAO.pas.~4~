unit Teste.FactoryFB.DAO;

interface

uses
  FireDAC.Stan.Intf, FireDAC.Stan.Option,
  FireDAC.Stan.Error, FireDAC.UI.Intf, FireDAC.Phys.Intf, FireDAC.Stan.Def,
  FireDAC.Stan.Pool, FireDAC.Stan.Async, FireDAC.Phys, FireDAC.Phys.FB,
  FireDAC.Phys.FBDef, FireDAC.VCLUI.Wait, Data.DB, FireDAC.Comp.Client,
  System.SysUtils, VCL.Forms;

type
  TFactoryFB = class
  private
    class var FConnection: TFDConnection;
  protected
    function GetQuery: TFDQuery;
  public
    constructor Create;
    destructor Destroy; override;

    procedure CancelTransaction;
    procedure ConfirmTransaction;
    procedure StartTransaction;

    function GetConnection: TFDConnection;
  end;


implementation

{ TFactoryFB }

procedure TFactoryFB.CancelTransaction;
begin
  if FConnection.InTransaction then
    FConnection.RollbackRetaining;
end;

procedure TFactoryFB.ConfirmTransaction;
begin
  if FConnection.InTransaction then
    FConnection.CommitRetaining;
end;

constructor TFactoryFB.Create;
begin
  try
   FConnection := TFDConnection.Create(Application);
   FConnection.ConnectionName := 'FBConnectionObj';
   FConnection.DriverName := 'FB';
   FConnection.LoginPrompt := False;
   FConnection.Connected := False;
   FConnection.Params.Values['DataBase'] := '0067';//Servidor + ':' + Caminho;
   FConnection.Params.Values['User_Name'] := 'SYSDBA';
   FConnection.Params.Values['Password'] := 'masterkey';
   FConnection.Params.Values['Server'] := '10.0.2.2';
   FConnection.Params.Values['DriverID'] := 'FB';
   FConnection.Connected := True;
  except
   raise Exception.Create('Erro ao conectar o banco de dados!');
  end;
end;

destructor TFactoryFB.Destroy;
begin

  inherited;
end;

function TFactoryFB.GetConnection: TFDConnection;
begin

end;

function TFactoryFB.GetQuery: TFDQuery;
begin

end;

procedure TFactoryFB.StartTransaction;
begin

end;

end.
