unit Teste.FactoryMYSQL.DAO;

interface

uses
  FireDAC.Stan.Intf, FireDAC.Stan.Option,
  FireDAC.Stan.Error, FireDAC.UI.Intf, FireDAC.Phys.Intf, FireDAC.Stan.Def,
  FireDAC.Stan.Pool, FireDAC.Stan.Async, FireDAC.Phys, Data.DB, FireDAC.Comp.Client,
  FireDAC.VCLUI.Wait, FireDAC.Comp.UI, FireDAC.Phys.FBDef,
  System.SysUtils, VCL.Forms, FireDAC.Stan.Param, FireDAC.DatS,
  FireDAC.DApt.Intf,  FireDAC.DApt, FireDAC.Comp.DataSet;

type
  TFactoryMySQL = class
  private
//    class var FTransacao: TFDTransaction;
    class var FConnection: TFDConnection;
//    class var FDGUIxWaitCursor: TFDGUIxWaitCursor;
//    class var FDPhysPgDriverLink: TFDPhysPgDriverLink;
  protected
    function GetQuery: TFDQuery;
  public
    constructor Create;
    destructor Destroy; override;

    procedure CancelTransaction;
    procedure ConfirmTransaction;
    procedure StartTransaction;

    function GetConnection: TFDConnection;
  end;

implementation

{ TFactoryMySQL }

procedure TFactoryMySQL.CancelTransaction;
begin
  if FConnection.InTransaction then
    FConnection.RollbackRetaining;
end;

procedure TFactoryMySQL.ConfirmTransaction;
begin
  if FConnection.InTransaction then
    FConnection.CommitRetaining;
end;

constructor TFactoryMySQL.Create;
begin
  try
   FConnection := TFDConnection.Create(Application);
   FConnection.ConnectionName := 'PGConnectionObj';
   FConnection.DriverName := 'PG';
   FConnection.LoginPrompt := False;
   FConnection.Connected := False;
   FConnection.Params.Values['DataBase'] := 'dados';//Servidor + ':' + Caminho;
   FConnection.Params.Values['User_Name'] := 'postgres';//UserName;
   FConnection.Params.Values['Password'] := '123';//PassWord;
   FConnection.Params.Values['Server'] := '10.0.2.2';
   FConnection.Params.Values['DriverID'] := 'PG';
   FConnection.Connected := True;
  except
   raise Exception.Create('Erro ao conectar o banco de dados!');
  end;
end;

destructor TFactoryMySQL.Destroy;
begin
  FConnection.Free;
  inherited;
end;

function TFactoryMySQL.GetConnection: TFDConnection;
begin
  Result := FConnection;
end;

function TFactoryMySQL.GetQuery: TFDQuery;
begin
  Result := TFDQuery.Create(nil);
  Result.Connection := FConnection;
end;

procedure TFactoryMySQL.StartTransaction;
begin
  if not(FConnection.InTransaction) then
    FConnection.StartTransaction;
end;

end.
