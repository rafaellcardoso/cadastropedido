unit Teste.ItemPedido.DAO;

interface

uses
  System.SysUtils,
  FireDAC.Comp.Client,
  System.Generics.Collections,
  FireDAC.Stan.Intf, FireDAC.Stan.Option,
  FireDAC.Stan.Param, FireDAC.Stan.Error, FireDAC.DatS, FireDAC.Phys.Intf,
  FireDAC.DApt.Intf, FireDAC.Stan.Async, FireDAC.DApt, Data.DB,
  FireDAC.Comp.DataSet,
  Teste.Default.DAO,
//  Teste.Pedido.Entity,
  Teste.ItemPedido.Entity;

type
  TPedidoDAO = class(TDefaultDAO)
  private
    function PopularItemPedido(AQuery: TFDQuery): TItemPedido;
  public
//    procedure Insert(Pedido: TItemPedido);
//    procedure Update(Pedido: TItemPedido);
//    procedure Delete(Id: Integer);

    //function FindAll(const ASql: String; const AParam: Boolean = False): TObjectList<TPedido>;
    //function FindById(const Id: Integer): TPedido;
    function FindItensByIdPedido(const IdPedido: Integer): TObjectList<TItemPedido>;
  end;


implementation

{ TPedidoDAO }

function TPedidoDAO.FindItensByIdPedido(
  const IdPedido: Integer): TObjectList<TItemPedido>;
var
  lQry: TFDQuery;
begin
  try
    Result := TObjectList<TItemPedido>.Create();
    lQry := GetQuery;
    lQry.Close;
    lQry.SQL.Clear;
    lQry.SQL.Add('SELECT PI.ID, PI.ID_PEDIDO, PI.ID_PRODUTO, ');
    lQry.SQL.Add(' PI.QTD, PI.VLR_ITEM, PI.VLR_TOTAL ');
    lQry.SQL.Add('FROM PEDIDO_ITEM PI ');
    lQry.SQL.Add('WHERE PI.ID_PEDIDO = :ID ');
    lQry.SQL.Add('ORDER BY PI.ID, PI.ID_PEDIDO ');
    lQry.Params[0].AsInteger := IdPedido;
    lQry.Open;
    if not (lQry.IsEmpty) then
    begin
      while not lQry.Eof do
      begin
        Result.Add(PopularItemPedido(lQry));
        lQry.Next;
      end;
    end;
  finally
    lQry.Free;
  end;
end;

function TPedidoDAO.PopularItemPedido(AQuery: TFDQuery): TItemPedido;
begin

end;

end.
